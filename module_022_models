```
## 2.2. Predicting Price with Location
#### Libraries
import warnings

import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import wqet_grader
from IPython.display import VimeoVideo
from sklearn.impute import SimpleImputer ## New for this session
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
from sklearn.pipeline import Pipeline, make_pipeline ## New for this session
from sklearn.utils.validation import check_is_fitted

warnings.simplefilter(action="ignore", category=FutureWarning)
wqet_grader.init("Project 2 Assessment")

#### Task 2.2.2: Add to the wrangle function below so that, in the DataFrame it returns, the "lat-lon" 
column is replaced by separate "lat" and "lon" columns
#### Split out Lat and Long columns to wrangle function
    df[["lat","lon"]] = df["lat-lon"].str.split(",",expand = True).astype(float)
    df.drop(columns = "lat-lon",inplace = True)
    
#### Task 2.2.3: Use you revised wrangle function create a DataFrames frame2 
from the file data/buenos-aires-real-estate-2.csv.

frame2 = wrangle("data/buenos-aires-real-estate-2.csv")

#### Task 2.2.4: Use pd.concat to concatenate frame1 and frame2

df = pd.concat(frame1,frame2, ignore_index=2)
print(df.info())
df.head()

### *** Explore ***
#### Task 2.2.5: Complete the code below to create a Mapbox scatter plot 
that shows the location of the apartments in df.

fig = px.scatter_mapbox(
    df,  # Our DataFrame
    lat="lat",
    lon="lon",
    width=600,  # Width of map
    height=600,  # Height of map
    color="price_aprox_usd",
    hover_data=["price_aprox_usd"],  # Display price when hovering mouse over house
)

fig.update_layout(mapbox_style="open-street-map")

fig.show()

#### Task 2.2.6: Complete the code below to create a 3D scatter plot, with "lon" on the x-axis, "lat" on the y-axis, 
and "price_aprox_usd" on the z-axis.

### *** Split ***
#### Task 2.2.7: Create the feature matrix named X_train. 
features = ["lon", "lat"]
X_train = df[features]
X_train.shape


```
